@using Models;
@using Workers;
@using Newtonsoft.Json;
@using System.Net.Http;

<label>@Label <code>*</code></label>
<div class="input-group mb-3">
    <input type="hidden" @bind="@empId" />
    <input type="text" class="form-control @validation" placeholder="@Label" @bind="@name" />
    <div class="input-group-append">
        <button class="btn btn-outline-secondary" type="button" @onclick="@(async () => await getUserListAsync())">🔍</button>
    </div>
</div>

@code{
    [Parameter] public string Label { get; set; } = "";
    string name { get; set; } = "";
    public int empId { get; set; }
    public string loginName { get; set; }
    public string userInput { get; set; }
    private Root root { get; set; }
    private string digest { get; set; } = "";
    string validation { get; set; } = "";

    private async Task getUserListAsync()
    {

        if (name != "")
        {
            HttpClient Http = new HttpClient();
            string url = Navigator.BaseUri + Configuration["BaseURL"];
            Http.DefaultRequestHeaders.Add("Accept", "application/json");
            Http.DefaultRequestHeaders.Add("X-RequestDigest", await SPTools.GetDigestAsync(Navigator.BaseUri,Configuration["BaseURL"]));
            var response = await Http.PostAsync(url + "_api/web/ensureuser('" + name + "')", null);
            if ((int)response.StatusCode == 200)
            {
                root = JsonConvert.DeserializeObject<Root>(await response.Content.ReadAsStringAsync());
                empId = root.Id;
                loginName = root.LoginName;
                userInput = name;
                name = root.Title;
                CalculateValidation();
            }
            else
            {
                empId = 0;
                loginName = "";
                userInput = "";
                CalculateValidation();
            }
        }
        StateHasChanged();
    }

    public void CalculateValidation()
    {
        if (empId > 0)
        {
            validation = "is-valid";
        }
        else
        {
            validation = "is-invalid";
        }
        StateHasChanged();
    }
}
